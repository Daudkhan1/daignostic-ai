name: Deploy to EC2 using AWS CLI

on:
  push:
    branches:
      - "main"

jobs:
  build-and-deploy:
    name: Build & Deploy Services
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service:
          - genai-app
          - microscopy

    env:
      REGION: ${{ secrets.AMAZON_S3_REGION_NAME }}
      ECR_URI: ${{ secrets.ECR_URI }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
      INSTANCE_ID: i-02a859aacad892fd3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Build Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel build

      - name: Build AIModels Package and Copy to Other Folders
        working-directory: AIModels
        run: |
          python -m build
          PACKAGE_PATH=$(ls dist/*.whl)
          cp $PACKAGE_PATH ../PredictionService/
        shell: bash

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AMAZON_S3_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AMAZON_S3_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AMAZON_S3_REGION_NAME }}

      - name: Build and Push Docker Image to ECR
        run: |
          aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $ECR_URI

          if [ "${{ matrix.service }}" = "genai-app" ]; then
            cd GenAIService/backend/
          else
            cd MicroscopyService/
          fi

          docker build -t ${{ matrix.service }}:latest .
          docker tag ${{ matrix.service }}:latest $AWS_ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/${{ matrix.service }}:latest
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/${{ matrix.service }}:latest

      - name: Upload docker-compose.yml to S3
        run: |
          if [ "${{ matrix.service }}" = "genai-app" ]; then
            aws s3 cp GenAIService/backend/docker-compose.yml s3://$S3_BUCKET_NAME/genai-app/docker-compose.yml --region $REGION
          else
            aws s3 cp MicroscopyService/docker-compose.yml s3://$S3_BUCKET_NAME/microscopy/docker-compose.yml --region $REGION
          fi

      - name: Deploy ${{ matrix.service }} on EC2 via SSM
        run: |
          if [ "${{ matrix.service }}" = "genai-app" ]; then
            SERVICE_DIR="genai-app"
          else
            SERVICE_DIR="microscopy"
          fi

          COMMAND_ID=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "Key=instanceIds,Values=${INSTANCE_ID}" \
            --parameters "commands=[
              'set -e',
              'mkdir -p /home/ubuntu/${SERVICE_DIR}',
              'echo Downloading ${SERVICE_DIR} docker-compose.yml from S3...',
              'aws s3 cp s3://${S3_BUCKET_NAME}/${SERVICE_DIR}/docker-compose.yml /home/ubuntu/${SERVICE_DIR}/docker-compose.yml --region ${REGION}',
              'echo Logging into ECR...',
              'aws ecr get-login-password --region ${REGION} | docker login --username AWS --password-stdin ${ECR_URI}',
              'echo Pulling new image...',
              'docker pull ${AWS_ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/${SERVICE_DIR}:latest',
              'echo Stopping existing containers...',
              'docker-compose -f /home/ubuntu/${SERVICE_DIR}/docker-compose.yml down || true',
              'echo Starting new containers...',
              'docker-compose -f /home/ubuntu/${SERVICE_DIR}/docker-compose.yml up -d',
              'docker system prune -f || true',
              'echo Deployment of ${SERVICE_DIR} complete.'
            ]" \
            --comment "Deploying ${SERVICE_DIR} via GitHub Actions" \
            --region "$REGION" \
            --query "Command.CommandId" --output text)

          echo "SSM Command ID: $COMMAND_ID"

          # Wait for command to finish
          while true; do
            STATUS=$(aws ssm get-command-invocation \
              --command-id $COMMAND_ID \
              --instance-id $INSTANCE_ID \
              --region $REGION \
              --query "Status" --output text)

            echo "Current Status: $STATUS"
            if [ "$STATUS" = "Success" ]; then
              echo "Deployment successful for $SERVICE_DIR"
              break
            elif [ "$STATUS" = "Failed" ] || [ "$STATUS" = "Cancelled" ]; then
              echo "SSM command failed or was cancelled for $SERVICE_DIR"
              aws ssm get-command-invocation \
                --command-id $COMMAND_ID \
                --instance-id $INSTANCE_ID \
                --region $REGION \
                --query "StandardErrorContent" --output text
              exit 1
            else
              sleep 10
            fi
          done


  #stop-ec2:
  #  name: Stop EC2 If Running
  #  runs-on: ubuntu-latest
  #  needs: deploy-master  # Ensure this job runs after deployment
  #  if: always()
  #
  #  steps:
  #    - name: Configure AWS CLI
  #      uses: aws-actions/configure-aws-credentials@v1
  #      with:
  #        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #        aws-region: ${{ secrets.AWS_REGION }}
  #
  #    - name: Stop EC2 If Running
  #      run: |
  #        INSTANCE_ID="i-043c8050d6c02f6b4"
  #        STATUS=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[0].Instances[0].State.Name" --output text)
  #
  #        echo "EC2 Instance Status: $STATUS"
  #
  #        if [ "$STATUS" == "running" ]; then
  #          echo "Stopping EC2 instance $INSTANCE_ID..."
  #          aws ec2 stop-instances --instance-ids $INSTANCE_ID
  #          aws ec2 wait instance-stopped --instance-ids $INSTANCE_ID
  #          echo "EC2 instance is now stopped."
  #        else
  #          echo "EC2 instance is already in state: $STATUS."
  #        fi